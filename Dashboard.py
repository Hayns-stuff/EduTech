# Form implementation generated from reading ui file 'C:\Users\Hzy\PycharmProjects\SHS_Enrollment_System\Coverted_UI_to_PY\FamilyEducational_fixed.ui'
#
# Created by: PyQt6 UI converter 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import database

def show_dashboard():
    dashboard_window = QtWidgets.QMainWindow()
    dashboard_ui = Ui_EnrollmentDashboard()
    dashboard_ui.setupUi(dashboard_window)
    dashboard_window.show()
    return dashboard_window


class Ui_EnrollmentDashboard(object):
    def setupUi(self, EnrollmentDashboard):
        EnrollmentDashboard.setObjectName("EnrollmentDashboard")
        EnrollmentDashboard.resize(720, 400)
        self.centralwidget = QtWidgets.QWidget(parent=EnrollmentDashboard)
        self.centralwidget.setObjectName("centralwidget")
        self.mainLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.mainLayout.setObjectName("mainLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(parent=self.centralwidget)
        self.stackedWidget.setObjectName("stackedWidget")
        self.dashboardPage = QtWidgets.QWidget()
        self.dashboardPage.setObjectName("dashboardPage")
        self.dashLayout = QtWidgets.QVBoxLayout(self.dashboardPage)
        self.dashLayout.setObjectName("dashLayout")
        self.frameDashboard = QtWidgets.QFrame(parent=self.dashboardPage)
        self.frameDashboard.setStyleSheet("\n"
"            background-color: #FF6600;\n"
"            border-radius: 30px;\n"
"            padding: 20px;\n"
"           ")
        self.frameDashboard.setObjectName("frameDashboard")
        self.frameLayout = QtWidgets.QVBoxLayout(self.frameDashboard)
        self.frameLayout.setObjectName("frameLayout")
        self.labelHeader = QtWidgets.QLabel(parent=self.frameDashboard)
        self.labelHeader.setStyleSheet("font-size:26px; font-weight:bold; color:white; padding:10px;")
        self.labelHeader.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.labelHeader.setObjectName("labelHeader")
        self.frameLayout.addWidget(self.labelHeader)
        self.analyticsRow = QtWidgets.QHBoxLayout()
        self.analyticsRow.setObjectName("analyticsRow")
        self.frameTotal = QtWidgets.QFrame(parent=self.frameDashboard)
        self.frameTotal.setStyleSheet("background:white; border-radius:15px; padding:20px;")
        self.frameTotal.setObjectName("frameTotal")
        self.vboxlayout = QtWidgets.QVBoxLayout(self.frameTotal)
        self.vboxlayout.setObjectName("vboxlayout")
        self.labelTotalTitle = QtWidgets.QLabel(parent=self.frameTotal)
        self.labelTotalTitle.setObjectName("labelTotalTitle")
        self.vboxlayout.addWidget(self.labelTotalTitle)
        self.labelTotalValue = QtWidgets.QLabel(parent=self.frameTotal)
        self.labelTotalValue.setStyleSheet("font-size:22px; font-weight:bold; color:#FF6600;")
        self.labelTotalValue.setObjectName("labelTotalValue")
        self.vboxlayout.addWidget(self.labelTotalValue)
        self.analyticsRow.addWidget(self.frameTotal)
        self.frameComplete = QtWidgets.QFrame(parent=self.frameDashboard)
        self.frameComplete.setStyleSheet("background:white; border-radius:15px; padding:20px;")
        self.frameComplete.setObjectName("frameComplete")
        self.vboxlayout1 = QtWidgets.QVBoxLayout(self.frameComplete)
        self.vboxlayout1.setObjectName("vboxlayout1")
        self.labelCompleteTitle = QtWidgets.QLabel(parent=self.frameComplete)
        self.labelCompleteTitle.setObjectName("labelCompleteTitle")
        self.vboxlayout1.addWidget(self.labelCompleteTitle)
        self.labelCompleteValue = QtWidgets.QLabel(parent=self.frameComplete)
        self.labelCompleteValue.setStyleSheet("font-size:22px; font-weight:bold; color:#FF6600;")
        self.labelCompleteValue.setObjectName("labelCompleteValue")
        self.vboxlayout1.addWidget(self.labelCompleteValue)
        self.analyticsRow.addWidget(self.frameComplete)
        self.frameIncomplete = QtWidgets.QFrame(parent=self.frameDashboard)
        self.frameIncomplete.setStyleSheet("background:white; border-radius:15px; padding:20px;")
        self.frameIncomplete.setObjectName("frameIncomplete")
        self.vboxlayout2 = QtWidgets.QVBoxLayout(self.frameIncomplete)
        self.vboxlayout2.setObjectName("vboxlayout2")
        self.labelIncompleteTitle = QtWidgets.QLabel(parent=self.frameIncomplete)
        self.labelIncompleteTitle.setObjectName("labelIncompleteTitle")
        self.vboxlayout2.addWidget(self.labelIncompleteTitle)
        self.labelIncompleteValue = QtWidgets.QLabel(parent=self.frameIncomplete)
        self.labelIncompleteValue.setStyleSheet("font-size:22px; font-weight:bold; color:#FF6600;")
        self.labelIncompleteValue.setObjectName("labelIncompleteValue")
        self.vboxlayout2.addWidget(self.labelIncompleteValue)
        self.analyticsRow.addWidget(self.frameIncomplete)
        self.frameOngoing = QtWidgets.QFrame(parent=self.frameDashboard)
        self.frameOngoing.setStyleSheet("background:white; border-radius:15px; padding:20px;")
        self.frameOngoing.setObjectName("frameOngoing")
        self.vboxlayout3 = QtWidgets.QVBoxLayout(self.frameOngoing)
        self.vboxlayout3.setObjectName("vboxlayout3")
        self.labelOngoingTitle = QtWidgets.QLabel(parent=self.frameOngoing)
        self.labelOngoingTitle.setObjectName("labelOngoingTitle")
        self.vboxlayout3.addWidget(self.labelOngoingTitle)
        self.labelOngoingValue = QtWidgets.QLabel(parent=self.frameOngoing)
        self.labelOngoingValue.setStyleSheet("font-size:22px; font-weight:bold; color:#FF6600;")
        self.labelOngoingValue.setObjectName("labelOngoingValue")
        self.vboxlayout3.addWidget(self.labelOngoingValue)
        self.analyticsRow.addWidget(self.frameOngoing)
        self.frameLayout.addLayout(self.analyticsRow)
        self.filtersRow = QtWidgets.QHBoxLayout()
        self.filtersRow.setObjectName("filtersRow")
        self.searchBar = QtWidgets.QLineEdit(parent=self.frameDashboard)
        self.searchBar.setObjectName("searchBar")
        self.filtersRow.addWidget(self.searchBar)
        self.filterStrand = QtWidgets.QComboBox(parent=self.frameDashboard)
        self.filterStrand.setObjectName("filterStrand")
        self.filtersRow.addWidget(self.filterStrand)
        self.filterStatus = QtWidgets.QComboBox(parent=self.frameDashboard)
        self.filterStatus.setObjectName("filterStatus")
        self.filtersRow.addWidget(self.filterStatus)
        self.refreshButton = QtWidgets.QPushButton(parent=self.frameDashboard)
        self.refreshButton.setObjectName("refreshButton")
        self.filtersRow.addWidget(self.refreshButton)
        self.frameLayout.addLayout(self.filtersRow)
        self.tableStudents = QtWidgets.QTableWidget(parent=self.frameDashboard)
        self.tableStudents.setStyleSheet("background:white; border-radius:10px;")
        self.tableStudents.setObjectName("tableStudents")
        self.tableStudents.setColumnCount(6)
        self.tableStudents.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableStudents.setHorizontalHeaderItem(5, item)
        self.frameLayout.addWidget(self.tableStudents)
        self.dashLayout.addWidget(self.frameDashboard)
        self.stackedWidget.addWidget(self.dashboardPage)
        self.detailsPage = QtWidgets.QWidget()
        self.detailsPage.setObjectName("detailsPage")
        self.detailsLayout = QtWidgets.QVBoxLayout(self.detailsPage)
        self.detailsLayout.setObjectName("detailsLayout")
        self.frameDetails = QtWidgets.QFrame(parent=self.detailsPage)
        self.frameDetails.setStyleSheet("background-color:#FF6600; border-radius:30px; padding:20px;")
        self.frameDetails.setObjectName("frameDetails")
        self.frameDetailsLayout = QtWidgets.QVBoxLayout(self.frameDetails)
        self.frameDetailsLayout.setObjectName("frameDetailsLayout")
        self.labelDetailsHeader = QtWidgets.QLabel(parent=self.frameDetails)
        self.labelDetailsHeader.setStyleSheet("font-size:22px; font-weight:bold; color:white;")
        self.labelDetailsHeader.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.labelDetailsHeader.setObjectName("labelDetailsHeader")
        self.frameDetailsLayout.addWidget(self.labelDetailsHeader)
        self.scrollArea = QtWidgets.QScrollArea(parent=self.frameDetails)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 267, 407))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.formLayoutDetails = QtWidgets.QFormLayout(self.scrollAreaWidgetContents)
        self.formLayoutDetails.setObjectName("formLayoutDetails")
        self.label = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label.setObjectName("label")
        self.formLayoutDetails.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label)
        self.detailLastName = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.detailLastName.setReadOnly(True)
        self.detailLastName.setObjectName("detailLastName")
        self.formLayoutDetails.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.detailLastName)
        self.label1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label1.setObjectName("label1")
        self.formLayoutDetails.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label1)
        self.detailFirstName = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.detailFirstName.setReadOnly(True)
        self.detailFirstName.setObjectName("detailFirstName")
        self.formLayoutDetails.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.detailFirstName)
        self.label2 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label2.setObjectName("label2")
        self.formLayoutDetails.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label2)
        self.detailStrand = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.detailStrand.setReadOnly(True)
        self.detailStrand.setObjectName("detailStrand")
        self.formLayoutDetails.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.detailStrand)
        self.label3 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label3.setObjectName("label3")
        self.formLayoutDetails.setWidget(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label3)
        self.detailEmail = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.detailEmail.setReadOnly(True)
        self.detailEmail.setObjectName("detailEmail")
        self.formLayoutDetails.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.detailEmail)
        self.label4 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label4.setObjectName("label4")
        self.formLayoutDetails.setWidget(4, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label4)
        self.detailAddress = QtWidgets.QTextEdit(parent=self.scrollAreaWidgetContents)
        self.detailAddress.setReadOnly(True)
        self.detailAddress.setObjectName("detailAddress")
        self.formLayoutDetails.setWidget(4, QtWidgets.QFormLayout.ItemRole.FieldRole, self.detailAddress)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.frameDetailsLayout.addWidget(self.scrollArea)
        self.buttonsRow = QtWidgets.QHBoxLayout()
        self.buttonsRow.setObjectName("buttonsRow")
        self.btnBack = QtWidgets.QPushButton(parent=self.frameDetails)
        self.btnBack.setObjectName("btnBack")
        self.buttonsRow.addWidget(self.btnBack)
        self.btnIncomplete = QtWidgets.QPushButton(parent=self.frameDetails)
        self.btnIncomplete.setStyleSheet("background:white; color:#FF6600; font-weight:bold;")
        self.btnIncomplete.setObjectName("btnIncomplete")
        self.buttonsRow.addWidget(self.btnIncomplete)
        self.btnComplete = QtWidgets.QPushButton(parent=self.frameDetails)
        self.btnComplete.setStyleSheet("background:green; color:white; font-weight:bold;")
        self.btnComplete.setObjectName("btnComplete")
        self.buttonsRow.addWidget(self.btnComplete)
        self.frameDetailsLayout.addLayout(self.buttonsRow)
        self.detailsLayout.addWidget(self.frameDetails)
        self.stackedWidget.addWidget(self.detailsPage)
        self.mainLayout.addWidget(self.stackedWidget)
        EnrollmentDashboard.setCentralWidget(self.centralwidget)

        # retranslate and connect
        self.retranslateUi(EnrollmentDashboard)
        QtCore.QMetaObject.connectSlotsByName(EnrollmentDashboard)

        # UI enhancements & signal connections
        # put "All" as initial filter options so they are present
        self.filterStrand.addItem("All")
        self.filterStatus.addItem("All")

        # selection behavior
        self.tableStudents.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.tableStudents.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.tableStudents.horizontalHeader().setStretchLastSection(True)
        # Connect actions
        self.tableStudents.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        # allow user to sort columns; we'll also programmatically sort after loading
        self.tableStudents.setSortingEnabled(True)

        # Connect actions
        self.refreshButton.clicked.connect(self.load_students)
        self.tableStudents.cellClicked.connect(self.on_row_selected)
        self.btnBack.clicked.connect(self.back_to_dashboard)
        self.btnComplete.clicked.connect(self.mark_complete)
        self.btnIncomplete.clicked.connect(self.mark_incomplete)

        # when search/filter changes, reload (use lambdas to avoid param mismatch)
        self.searchBar.textChanged.connect(lambda _: self.load_students())
        self.filterStrand.currentTextChanged.connect(lambda _: self.load_students())
        self.filterStatus.currentTextChanged.connect(lambda _: self.load_students())

        # initial load
        self.load_students()

    def retranslateUi(self, EnrollmentDashboard):
        _translate = QtCore.QCoreApplication.translate
        EnrollmentDashboard.setWindowTitle(_translate("EnrollmentDashboard", "Enrollment Dashboard"))
        self.labelHeader.setText(_translate("EnrollmentDashboard", "Enrollment Dashboard"))
        self.labelTotalTitle.setText(_translate("EnrollmentDashboard", "Total Enrolled"))
        self.labelTotalValue.setText(_translate("EnrollmentDashboard", "0"))
        self.labelCompleteTitle.setText(_translate("EnrollmentDashboard", "Completed"))
        self.labelCompleteValue.setText(_translate("EnrollmentDashboard", "0"))
        self.labelIncompleteTitle.setText(_translate("EnrollmentDashboard", "Incomplete"))
        self.labelIncompleteValue.setText(_translate("EnrollmentDashboard", "0"))
        self.labelOngoingTitle.setText(_translate("EnrollmentDashboard", "Ongoing"))
        self.labelOngoingValue.setText(_translate("EnrollmentDashboard", "0"))
        self.searchBar.setPlaceholderText(_translate("EnrollmentDashboard", "Search by name..."))
        self.filterStrand.setProperty("placeholderText", _translate("EnrollmentDashboard", "Strand"))
        self.filterStatus.setProperty("placeholderText", _translate("EnrollmentDashboard", "Status"))
        self.refreshButton.setText(_translate("EnrollmentDashboard", "Refresh"))
        item = self.tableStudents.horizontalHeaderItem(0)
        item.setText(_translate("EnrollmentDashboard", "ID"))
        item = self.tableStudents.horizontalHeaderItem(1)
        item.setText(_translate("EnrollmentDashboard", "LRN"))
        item = self.tableStudents.horizontalHeaderItem(2)
        item.setText(_translate("EnrollmentDashboard", "Last Name"))
        item = self.tableStudents.horizontalHeaderItem(3)
        item.setText(_translate("EnrollmentDashboard", "First Name"))
        item = self.tableStudents.horizontalHeaderItem(4)
        item.setText(_translate("EnrollmentDashboard", "Strand"))
        item = self.tableStudents.horizontalHeaderItem(5)
        item.setText(_translate("EnrollmentDashboard", "Status"))
        self.labelDetailsHeader.setText(_translate("EnrollmentDashboard", "Student Details"))
        self.label.setText(_translate("EnrollmentDashboard", "Last Name:"))
        self.label1.setText(_translate("EnrollmentDashboard", "First Name:"))
        self.label2.setText(_translate("EnrollmentDashboard", "Strand:"))
        self.label3.setText(_translate("EnrollmentDashboard", "Email:"))
        self.label4.setText(_translate("EnrollmentDashboard", "Address:"))
        self.btnBack.setText(_translate("EnrollmentDashboard", "Back"))
        self.btnIncomplete.setText(_translate("EnrollmentDashboard", "Mark Incomplete"))
        self.btnComplete.setText(_translate("EnrollmentDashboard", "Mark Complete"))

    # ---------------------------
    # Data / interaction handlers
    # ---------------------------
    def load_students(self):
        """
        Load students from DB and populate table.
        Also updates the small analytics numbers and filter options (keeps simple).
        """
        rows = database.fetch_students() or []

        # simple analytics counts
        total = len(rows)
        completed = sum(1 for r in rows if str(r.get("status")).lower() == "completed")
        incomplete = sum(1 for r in rows if str(r.get("status")).lower() == "incomplete")
        ongoing = total - (completed + incomplete)

        self.labelTotalValue.setText(str(total))
        self.labelCompleteValue.setText(str(completed))
        self.labelIncompleteValue.setText(str(incomplete))
        self.labelOngoingValue.setText(str(ongoing))

        # fill filter combos once (adds unique values)
        existing_strands = {self.filterStrand.itemText(i) for i in range(self.filterStrand.count())}
        existing_statuses = {self.filterStatus.itemText(i) for i in range(self.filterStatus.count())}
        strands = {r.get("strand") or "" for r in rows}
        statuses = {r.get("status") or "" for r in rows}
        for s in sorted(strands):
            if s and s not in existing_strands:
                self.filterStrand.addItem(s)
        for st in sorted(statuses):
            if st and st not in existing_statuses:
                self.filterStatus.addItem(st)

        # apply search + filters
        search = self.searchBar.text().strip().lower()
        strand_filter = self.filterStrand.currentText()
        status_filter = self.filterStatus.currentText()

        self.tableStudents.setRowCount(0)
        for r in rows:
            if search:
                name = f"{r.get('last_name','')} {r.get('first_name','')}".lower()
                if search not in name and search not in (r.get("lrn","") or "").lower():
                    continue
            if strand_filter and strand_filter != "All" and strand_filter != r.get("strand"):
                continue
            if status_filter and status_filter != "All" and status_filter != r.get("status"):
                continue

            row_pos = self.tableStudents.rowCount()
            self.tableStudents.insertRow(row_pos)
            self.tableStudents.setItem(row_pos, 0, QtWidgets.QTableWidgetItem(str(r.get("id", ""))))
            self.tableStudents.setItem(row_pos, 1, QtWidgets.QTableWidgetItem(r.get("lrn", "")))
            self.tableStudents.setItem(row_pos, 2, QtWidgets.QTableWidgetItem(r.get("last_name", "")))
            self.tableStudents.setItem(row_pos, 3, QtWidgets.QTableWidgetItem(r.get("first_name", "")))
            self.tableStudents.setItem(row_pos, 4, QtWidgets.QTableWidgetItem(r.get("strand", "")))
            self.tableStudents.setItem(row_pos, 5, QtWidgets.QTableWidgetItem(r.get("status", "")))

        # default sort: show most recent entries first (ID desc)
        try:
            self.tableStudents.sortItems(0, QtCore.Qt.SortOrder.DescendingOrder)
        except Exception:
            # ignore if sorting fails for any reason
            pass

    def on_row_selected(self, row, column):
        """
        Called when a table cell is clicked. Loads the selected student's details.
        """
        try:
            id_item = self.tableStudents.item(row, 0)
            if not id_item:
                return
            try:
                student_id = int(id_item.text())
            except Exception:
                student_id = id_item.text()
            student = database.fetch_student_by_id(student_id)
            if not student:
                QtWidgets.QMessageBox.warning(None, "Not found", "Student record not found in DB.")
                return

            # populate details
            self.detailLastName.setText(student.get("last_name", ""))
            self.detailFirstName.setText(student.get("first_name", ""))
            self.detailStrand.setText(student.get("strand", ""))
            self.detailEmail.setText(student.get("email", ""))
            self.detailAddress.setPlainText(student.get("address", ""))

            # switch to details page
            self.stackedWidget.setCurrentWidget(self.detailsPage)
        except Exception as e:
            print(f"[ERROR] on_row_selected: {e}")

    def back_to_dashboard(self):
        self.stackedWidget.setCurrentWidget(self.dashboardPage)

    def mark_complete(self):
        self._change_status_of_current_detail("Completed")

    def mark_incomplete(self):
        self._change_status_of_current_detail("Incomplete")

    def _change_status_of_current_detail(self, new_status):
        """
        Helper: reads the currently shown student's ID from the details page (via the table selection),
        updates DB, refreshes UI.
        """
        try:
            # find selected row's id
            # If the table selection changed (we're on details page), get the selected row in table
            selected_row = self.tableStudents.currentRow()
            if selected_row < 0:
                # no selection
                QtWidgets.QMessageBox.information(None, "No selection", "Please select a student first.")
                return
            id_item = self.tableStudents.item(selected_row, 0)
            if not id_item:
                QtWidgets.QMessageBox.information(None, "No ID", "Selected row has no ID.")
                return
            try:
                student_id = int(id_item.text())
            except Exception:
                student_id = id_item.text()
            ok = database.update_student_status(student_id, new_status)
            if ok:
                QtWidgets.QMessageBox.information(None, "Success", f"Student status updated to '{new_status}'.")
                self.load_students()
              
            else:
                QtWidgets.QMessageBox.critical(None, "Failed", "Failed to update status. Check logs.")
        except Exception as e:
            print(f"[ERROR] _change_status_of_current_detail: {e}")
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {e}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    win = show_dashboard()
    sys.exit(app.exec())
